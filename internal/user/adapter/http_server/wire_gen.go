// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package http_server

import (
	profile2 "github.com/duongnln96/blog-realworld/internal/user/adapter/http_server/handler/profile"
	user3 "github.com/duongnln96/blog-realworld/internal/user/adapter/http_server/handler/user"
	"github.com/duongnln96/blog-realworld/internal/user/adapter/repository/postgresql/follow"
	"github.com/duongnln96/blog-realworld/internal/user/adapter/repository/postgresql/user"
	"github.com/duongnln96/blog-realworld/internal/user/core/service/profile"
	user2 "github.com/duongnln96/blog-realworld/internal/user/core/service/user"
	"github.com/duongnln96/blog-realworld/internal/user/infras/echo_framework"
	"github.com/duongnln96/blog-realworld/internal/user/infras/grpc_client/auth/auth_token"
	"github.com/duongnln96/blog-realworld/pkg/adapter/postgres"
	"github.com/duongnln96/blog-realworld/pkg/config"
)

// Injectors from wire.go:

func InitNewApp(config2 *config.Configs) (*app, func(), error) {
	httpServerI, cleanup := newHTTPServer()
	postgresDBAdapterI, cleanup2 := newPostgresDbAdapter(config2)
	userRepoI := user.NewRepoManager(postgresDBAdapterI)
	authTokenDomainI, err := auth_token.NewGrpcClient(config2)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	userServiceI := user2.NewService(config2, userRepoI, authTokenDomainI)
	handlerI := user3.NewHandler(userServiceI)
	followRepoI := follow.NewRepoManager(postgresDBAdapterI)
	followServiceI := profile.NewService(config2, followRepoI, userRepoI)
	profileHandlerI := profile2.NewHandler(followServiceI, userServiceI)
	http_serverApp := NewApp(config2, httpServerI, handlerI, profileHandlerI)
	return http_serverApp, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

func newPostgresDbAdapter(cfg *config.Configs) (postgres.PostgresDBAdapterI, func()) {
	adapter := postgres.NewPostgresDBAdapter(cfg.PostgresConfigMap.Get("postgres"))

	return adapter, func() { adapter.Close() }
}

func newHTTPServer() (echo_framework.HTTPServerI, func()) {
	echoServer := echo_framework.NewHttpServer()

	return echoServer, func() { echoServer.Stop() }
}
