// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: auth/v1/auth_token_service.proto

package authv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthTokenService_ValidateAuthToken_FullMethodName = "/auth.v1.AuthTokenService/ValidateAuthToken"
	AuthTokenService_GenAuthToken_FullMethodName      = "/auth.v1.AuthTokenService/GenAuthToken"
	AuthTokenService_DeleteAuthToken_FullMethodName   = "/auth.v1.AuthTokenService/DeleteAuthToken"
)

// AuthTokenServiceClient is the client API for AuthTokenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthTokenServiceClient interface {
	ValidateAuthToken(ctx context.Context, in *ValidateAuthTokenRequest, opts ...grpc.CallOption) (*ValidateAuthTokenResponse, error)
	GenAuthToken(ctx context.Context, in *GenAuthTokenRequest, opts ...grpc.CallOption) (*GenAuthTokenResponse, error)
	DeleteAuthToken(ctx context.Context, in *DeleteAuthTokenRequest, opts ...grpc.CallOption) (*DeleteAuthTokenResponse, error)
}

type authTokenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthTokenServiceClient(cc grpc.ClientConnInterface) AuthTokenServiceClient {
	return &authTokenServiceClient{cc}
}

func (c *authTokenServiceClient) ValidateAuthToken(ctx context.Context, in *ValidateAuthTokenRequest, opts ...grpc.CallOption) (*ValidateAuthTokenResponse, error) {
	out := new(ValidateAuthTokenResponse)
	err := c.cc.Invoke(ctx, AuthTokenService_ValidateAuthToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authTokenServiceClient) GenAuthToken(ctx context.Context, in *GenAuthTokenRequest, opts ...grpc.CallOption) (*GenAuthTokenResponse, error) {
	out := new(GenAuthTokenResponse)
	err := c.cc.Invoke(ctx, AuthTokenService_GenAuthToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authTokenServiceClient) DeleteAuthToken(ctx context.Context, in *DeleteAuthTokenRequest, opts ...grpc.CallOption) (*DeleteAuthTokenResponse, error) {
	out := new(DeleteAuthTokenResponse)
	err := c.cc.Invoke(ctx, AuthTokenService_DeleteAuthToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthTokenServiceServer is the server API for AuthTokenService service.
// All implementations must embed UnimplementedAuthTokenServiceServer
// for forward compatibility
type AuthTokenServiceServer interface {
	ValidateAuthToken(context.Context, *ValidateAuthTokenRequest) (*ValidateAuthTokenResponse, error)
	GenAuthToken(context.Context, *GenAuthTokenRequest) (*GenAuthTokenResponse, error)
	DeleteAuthToken(context.Context, *DeleteAuthTokenRequest) (*DeleteAuthTokenResponse, error)
	mustEmbedUnimplementedAuthTokenServiceServer()
}

// UnimplementedAuthTokenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthTokenServiceServer struct {
}

func (UnimplementedAuthTokenServiceServer) ValidateAuthToken(context.Context, *ValidateAuthTokenRequest) (*ValidateAuthTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAuthToken not implemented")
}
func (UnimplementedAuthTokenServiceServer) GenAuthToken(context.Context, *GenAuthTokenRequest) (*GenAuthTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenAuthToken not implemented")
}
func (UnimplementedAuthTokenServiceServer) DeleteAuthToken(context.Context, *DeleteAuthTokenRequest) (*DeleteAuthTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthToken not implemented")
}
func (UnimplementedAuthTokenServiceServer) mustEmbedUnimplementedAuthTokenServiceServer() {}

// UnsafeAuthTokenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthTokenServiceServer will
// result in compilation errors.
type UnsafeAuthTokenServiceServer interface {
	mustEmbedUnimplementedAuthTokenServiceServer()
}

func RegisterAuthTokenServiceServer(s grpc.ServiceRegistrar, srv AuthTokenServiceServer) {
	s.RegisterService(&AuthTokenService_ServiceDesc, srv)
}

func _AuthTokenService_ValidateAuthToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateAuthTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthTokenServiceServer).ValidateAuthToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthTokenService_ValidateAuthToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthTokenServiceServer).ValidateAuthToken(ctx, req.(*ValidateAuthTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthTokenService_GenAuthToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenAuthTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthTokenServiceServer).GenAuthToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthTokenService_GenAuthToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthTokenServiceServer).GenAuthToken(ctx, req.(*GenAuthTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthTokenService_DeleteAuthToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAuthTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthTokenServiceServer).DeleteAuthToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthTokenService_DeleteAuthToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthTokenServiceServer).DeleteAuthToken(ctx, req.(*DeleteAuthTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthTokenService_ServiceDesc is the grpc.ServiceDesc for AuthTokenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthTokenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.v1.AuthTokenService",
	HandlerType: (*AuthTokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateAuthToken",
			Handler:    _AuthTokenService_ValidateAuthToken_Handler,
		},
		{
			MethodName: "GenAuthToken",
			Handler:    _AuthTokenService_GenAuthToken_Handler,
		},
		{
			MethodName: "DeleteAuthToken",
			Handler:    _AuthTokenService_DeleteAuthToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth/v1/auth_token_service.proto",
}
